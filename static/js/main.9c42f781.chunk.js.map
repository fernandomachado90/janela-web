{"version":3,"sources":["Book.js","Code.js","App.js","serviceWorker.js","index.js"],"names":["Book","className","DEFAULT","Code","title","html","css","js","data-height","data-editable","data-theme-id","data-default-tab","data-prefill","data-lang","prefill","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAOeA,MAJf,YAA8B,IAAdC,EAAa,EAAbA,UACd,OAAO,yBAAKA,UAAS,eAAUA,GAAwB,KAAhD,SCDHC,G,MACC,qBADDA,EAIA,mBAJAA,EAQD,yCA4BUC,MAxBf,YAAoD,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,IAAKC,EAAiB,EAAjBA,GAAIN,EAAa,EAAbA,UAKpC,OAJa,IAATI,IAAeA,EAAOH,IACd,IAARI,IAAcA,EAAMJ,IACb,IAAPK,IAAaA,EAAKL,GAGpB,yBAAKD,UAAS,eAAUA,GAAwB,KAC9C,yBACEG,MAAM,UACNH,UAAU,UACVO,cAAY,OACZC,gBAAc,OACdC,gBAAc,OACdC,mBAAiB,cACjBC,eAAA,oBAA2BR,GAAgB,GAA3C,OAEA,yBAAKS,YAAU,QAAQR,GACvB,yBAAKQ,YAAU,OAAOP,GACtB,yBAAKO,YAAU,MAAMN,MC5BvBO,EAAU,CACdT,MAAM,EACNC,IAAI,oCACJC,IAAI,GAYSQ,MATf,WACE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CAAMA,UAAU,aAChB,kBAAC,EAAD,eAAMG,MAAM,IAAOU,EAAnB,CAA4Bb,UAAU,iBCHxBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c42f781.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./Book.css\"\n\nfunction Book({ className }) {\n  return <div className={`Book ${className ? className : \"\"}`}>book</div>\n}\n\nexport default Book\n","import React from \"react\"\nimport \"./Code.css\"\n\nconst DEFAULT = {\n  html: `<body>\n\n</body>`,\n  css: `body {\n  \n};\n`,\n  js: `// Aperte F12 para acessar o Console\n`,\n}\n\nfunction Code({ title, html, css, js, className }) {\n  if (html === true) html = DEFAULT.html\n  if (css === true) css = DEFAULT.css\n  if (js === true) js = DEFAULT.js\n\n  return (\n    <div className={`Code ${className ? className : \"\"}`}>\n      <div\n        title=\"codepen\"\n        className=\"codepen\"\n        data-height=\"100%\"\n        data-editable=\"true\"\n        data-theme-id=\"dark\"\n        data-default-tab=\"html,result\"\n        data-prefill={`{\"title\":\"${title ? title : \"\"}\"}`}\n      >\n        <pre data-lang=\"html\">{html}</pre>\n        <pre data-lang=\"css\">{css}</pre>\n        <pre data-lang=\"js\">{js}</pre>\n      </div>\n    </div>\n  )\n}\n\nexport default Code\n","import React from \"react\"\nimport \"./App.css\"\nimport Book from \"./Book\"\nimport Code from \"./Code\"\n\nconst prefill = {\n  html: true,\n  css: `body {background-color: #F1B8FF};`,\n  js: true,\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Book className=\"Box Left\" />\n      <Code title=\"\" {...prefill} className=\"Box Right\" />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\")\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}